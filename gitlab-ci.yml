image: gitlab-registry.proxym-group.net/docker/flutter:v3.3.8

variables:
  #git variables
  GIT_SUBMODULE_STRATEGY: recursive #'recurcive' to tell the runner to fetch your submodules (including submodules of submodules) before the job.
  GIT_STRATEGY: fetch #Please refer to https://docs.gitlab.com/ee/ci/yaml/#git-strategy to learn more about this variable.
  #ios runner variables
  CI_KEYCHAIN_NAME: "ci.keychain"
  CI_KEYCHAIN_PATH: "/Users/support/Library/Keychains/$CI_KEYCHAIN_NAME-db"
  #ios project variables
  APP_IDENTIFIER: "com.tunisietelecom.senior"
  PROJECT: "Runner.xcodeproj"
  WORKSPACE: "Runner.xcworkspace"
  EXPORT_METHOD: "ad-hoc" #Available export methods are: app-store, ad-hoc, and enterprise.
  EXPORT_METHOD_ALIAS: "adhoc" #Alias of the chosen export method, use either: appstore, adhoc or enterprise.
  PROD_EXPORT_METHOD: "app-store"
  PROD_EXPORT_METHOD_ALIAS: "appstore"
  IPA_FILE_NAME: "tt-senior-app"
  #sonar variables
  SONAR_URL: "http://sonar.proxym-it.tn/"
  #firebase variables
  FIREBASE_ANDROID_APP_ID: "1:690258235215:android:60aad32fe3b8f188e1bf3a"
  FIREBASE_IOS_APP_ID: "1:690258235215:ios:a7597d869219cec5e1bf3a"
  FIREBASE_INTERNAL_TESTERS_GROUP: "proxym_internal_testers"
  FIREBASE_TT_TESTERS_GROUP: "tt_testers"
  #testflight variables
  APPLE_DEVELOPER_TEAM_NAME: "TUNISIE TELECOM Apps" #The name of the App Store Connect team (needed if used AppleID is enrolled in multiple teams. Use the exact team name as displayed on App Store Connect portal)

stages:
  - analyze
  - build
  - deliver

analyze:
  stage: analyze
  script:
    # Download dependencies
    - flutter pub get
    # Run build_runner
    - flutter pub run build_runner build --delete-conflicting-outputs
    # Run tests without user feedback regeneration tests.output and coverage/lcov.info
    - flutter test --machine --coverage > tests.output
    # Run the analysis and publish to the SonarQube server
    - sonar-scanner -Dsonar.host.url="$SONAR_URL"
      -Dsonar.login=$SONAR_TOKEN
      -Dsonar.projectKey=${SONAR_PROJECT_KEY}
      -Dsonar.projectName="${SONAR_PROJECT_NAME}"
      -Dsonar.branch.name="$CI_COMMIT_BRANCH"
      -Dsonar.projectVersion="$CI_COMMIT_REF_NAME"
      -Dsonar.qualitygate.wait=true
      -Dsonar.dart.analysis.useExistingOptions=true
      -Dsonar.exclusions="lib/generated/**"
  only:
    - /^feature\/.+$/
    - develop
  tags:
    - docker

.build_android: &build_android
  stage: build
  before_script:
    # Download dependencies
    - flutter pub get
    # Run build_runner
    - flutter pub run build_runner build --delete-conflicting-outputs
    # Define timestamp variable (Epoch Timestamp)
    - timestamp=$(date +'%s')
  script:
    - echo "Building android app"
  tags:
    - docker

build_android:dev:
  <<: *build_android
  dependencies:
    - analyze
  script:
    - flutter build apk --flavor dev --dart-define=BUILD_VARIANT=DEV --build-number=$timestamp
  artifacts:
    when: on_success
    paths:
      - ./build/app/outputs/apk/dev/release/app-dev-release.apk
  only:
    - develop

build_android:dev:manual:
  <<: *build_android
  dependencies:
    - analyze
  script:
    - flutter build apk --flavor dev --dart-define=BUILD_VARIANT=DEV --build-number=$timestamp
  artifacts:
    when: on_success
    paths:
      - ./build/app/outputs/apk/dev/release/app-dev-release.apk
  only:
    - /^feature\/.+$/
  when: manual

build_android:qa:
  <<: *build_android
  rules:
    - if: $CI_COMMIT_TAG =~ /^QA_.*$/
      when: always
  script:
    - flutter build apk --flavor qa --dart-define=BUILD_VARIANT=QA --build-number=$timestamp
  artifacts:
    when: on_success
    paths:
      - ./build/app/outputs/apk/qa/release/app-qa-release.apk

build_android:sit:
  <<: *build_android
  dependencies:
    - analyze
  script:
    - flutter build apk --flavor sit --dart-define=BUILD_VARIANT=SIT --build-number=$timestamp
  artifacts:
    when: on_success
    paths:
      - ./build/app/outputs/apk/sit/release/app-sit-release.apk
  only:
    - develop
  when: manual

build_android:uat:
  <<: *build_android
  script:
    - flutter build apk --flavor uat --dart-define=BUILD_VARIANT=UAT --build-number=$timestamp
  artifacts:
    when: on_success
    paths:
      - ./build/app/outputs/apk/uat/release/app-uat-release.apk
  only:
    - /^release\/.+$/
  when: manual

build_android:prod:
  <<: *build_android
  script:
    - flutter build apk --flavor prod --dart-define=BUILD_VARIANT=PROD --build-number=$timestamp
  artifacts:
    when: on_success
    paths:
      - ./build/app/outputs/apk/prod/release/app-prod-release.apk
  only:
    - master
  when: manual

.build_ios: &build_ios
  stage: build
  before_script:
    # Download dependencies
    - flutter pub get
    # Run build_runner
    - flutter pub run build_runner build --delete-conflicting-outputs
    # Define timestamp variable (Epoch Timestamp)
    - timestamp=$(date +'%s')
    # Select Xcode version to be used
    - cd ./ios
    - bundle install
    - bundle exec fastlane ios prepare_xcode
    - pod repo update
    - cd ..
  script:
    - echo "Building ios app"
  tags:
    - ios_xcode_14

build_ios:dev:
  <<: *build_ios
  dependencies:
    - analyze
  script:
    - flutter build ios --release --no-codesign --flavor dev --dart-define=BUILD_VARIANT=DEV --build-number=$timestamp
    - cd ./ios
    - bundle install
    - security unlock-keychain -p $CI_KEYCHAIN_PASSWORD $CI_KEYCHAIN_PATH
    - bundle exec fastlane ios prepare_signature type:"$EXPORT_METHOD_ALIAS" project:"$PROJECT" configuration:"Release-dev" keychain_name:"$CI_KEYCHAIN_NAME" keychain_password:"$CI_KEYCHAIN_PASSWORD" app_identifier:"$APP_IDENTIFIER" export_method:"$EXPORT_METHOD" export_method_alias:"$EXPORT_METHOD_ALIAS" code_signing_identity:"iPhone Distribution"
    - bundle exec fastlane ios build_and_export project:"$PROJECT" workspace:"$WORKSPACE" scheme:"dev" configuration:"Release-dev" export_method:"$EXPORT_METHOD" output_name:"$IPA_FILE_NAME" app_identifier:"$APP_IDENTIFIER"
  artifacts:
    when: on_success
    paths:
      - ./ios/$IPA_FILE_NAME.ipa
      - ./ios/$IPA_FILE_NAME.app.dSYM.zip
  only:
    - develop

build_ios:dev:manual:
  <<: *build_ios
  dependencies:
    - analyze
  script:
    - flutter build ios --release --no-codesign --flavor dev --dart-define=BUILD_VARIANT=DEV --build-number=$timestamp
    - cd ./ios
    - bundle install
    - security unlock-keychain -p $CI_KEYCHAIN_PASSWORD $CI_KEYCHAIN_PATH
    - bundle exec fastlane ios prepare_signature type:"$EXPORT_METHOD_ALIAS" project:"$PROJECT" configuration:"Release-dev" keychain_name:"$CI_KEYCHAIN_NAME" keychain_password:"$CI_KEYCHAIN_PASSWORD" app_identifier:"$APP_IDENTIFIER" export_method:"$EXPORT_METHOD" export_method_alias:"$EXPORT_METHOD_ALIAS" code_signing_identity:"iPhone Distribution"
    - bundle exec fastlane ios build_and_export project:"$PROJECT" workspace:"$WORKSPACE" scheme:"dev" configuration:"Release-dev" export_method:"$EXPORT_METHOD" output_name:"$IPA_FILE_NAME" app_identifier:"$APP_IDENTIFIER"
  artifacts:
    when: on_success
    paths:
      - ./ios/$IPA_FILE_NAME.ipa
      - ./ios/$IPA_FILE_NAME.app.dSYM.zip
  only:
    - /^feature\/.+$/
  when: manual

build_ios:qa:
  <<: *build_ios
  rules:
    - if: $CI_COMMIT_TAG =~ /^QA_.*$/
      when: always
  script:
    - flutter build ios --release --no-codesign --flavor qa --dart-define=BUILD_VARIANT=QA --build-number=$timestamp
    - cd ./ios
    - bundle install
    - security unlock-keychain -p $CI_KEYCHAIN_PASSWORD $CI_KEYCHAIN_PATH
    - bundle exec fastlane ios prepare_signature type:"$EXPORT_METHOD_ALIAS" project:"$PROJECT" configuration:"Release-qa" keychain_name:"$CI_KEYCHAIN_NAME" keychain_password:"$CI_KEYCHAIN_PASSWORD" app_identifier:"$APP_IDENTIFIER" export_method:"$EXPORT_METHOD" export_method_alias:"$EXPORT_METHOD_ALIAS" code_signing_identity:"iPhone Distribution"
    - bundle exec fastlane ios build_and_export project:"$PROJECT" workspace:"$WORKSPACE" scheme:"qa" configuration:"Release-qa" export_method:"$EXPORT_METHOD" output_name:"$IPA_FILE_NAME" app_identifier:"$APP_IDENTIFIER"
  artifacts:
    when: on_success
    paths:
      - ./ios/$IPA_FILE_NAME.ipa
      - ./ios/$IPA_FILE_NAME.app.dSYM.zip

build_ios:sit:
  <<: *build_ios
  dependencies:
    - analyze
  script:
    - flutter build ios --release --no-codesign --flavor sit --dart-define=BUILD_VARIANT=SIT --build-number=$timestamp
    - cd ./ios
    - bundle install
    - security unlock-keychain -p $CI_KEYCHAIN_PASSWORD $CI_KEYCHAIN_PATH
    - bundle exec fastlane ios prepare_signature type:"$EXPORT_METHOD_ALIAS" project:"$PROJECT" configuration:"Release-sit" keychain_name:"$CI_KEYCHAIN_NAME" keychain_password:"$CI_KEYCHAIN_PASSWORD" app_identifier:"$APP_IDENTIFIER" export_method:"$EXPORT_METHOD" export_method_alias:"$EXPORT_METHOD_ALIAS" code_signing_identity:"iPhone Distribution"
    - bundle exec fastlane ios build_and_export project:"$PROJECT" workspace:"$WORKSPACE" scheme:"sit" configuration:"Release-sit" export_method:"$EXPORT_METHOD" output_name:"$IPA_FILE_NAME" app_identifier:"$APP_IDENTIFIER"
  artifacts:
    when: on_success
    paths:
      - ./ios/$IPA_FILE_NAME.ipa
      - ./ios/$IPA_FILE_NAME.app.dSYM.zip
  only:
    - develop
  when: manual

build_ios:uat:
  <<: *build_ios
  script:
    - flutter build ios --release --no-codesign --flavor uat --dart-define=BUILD_VARIANT=UAT --build-number=$timestamp
    - cd ./ios
    - bundle install
    - security unlock-keychain -p $CI_KEYCHAIN_PASSWORD $CI_KEYCHAIN_PATH
    - bundle exec fastlane ios prepare_signature type:"$EXPORT_METHOD_ALIAS" project:"$PROJECT" configuration:"Release-uat" keychain_name:"$CI_KEYCHAIN_NAME" keychain_password:"$CI_KEYCHAIN_PASSWORD" app_identifier:"$APP_IDENTIFIER" export_method:"$EXPORT_METHOD" export_method_alias:"$EXPORT_METHOD_ALIAS" code_signing_identity:"iPhone Distribution"
    - bundle exec fastlane ios build_and_export project:"$PROJECT" workspace:"$WORKSPACE" scheme:"uat" configuration:"Release-uat" export_method:"$EXPORT_METHOD" output_name:"$IPA_FILE_NAME" app_identifier:"$APP_IDENTIFIER"
  artifacts:
    when: on_success
    paths:
      - ./ios/$IPA_FILE_NAME.ipa
      - ./ios/$IPA_FILE_NAME.app.dSYM.zip
  only:
    - /^release\/.+$/
  when: manual

build_ios:prod:
  <<: *build_ios
  script:
    - flutter build ios --release --no-codesign --flavor prod --dart-define=BUILD_VARIANT=PROD --build-number=$timestamp
    - cd ./ios
    - bundle install
    - security unlock-keychain -p $CI_KEYCHAIN_PASSWORD $CI_KEYCHAIN_PATH
    - bundle exec fastlane ios prepare_signature type:"$PROD_EXPORT_METHOD_ALIAS" project:"$PROJECT" configuration:"Release-prod" keychain_name:"$CI_KEYCHAIN_NAME" keychain_password:"$CI_KEYCHAIN_PASSWORD" app_identifier:"$APP_IDENTIFIER" export_method:"$PROD_EXPORT_METHOD" export_method_alias:"$PROD_EXPORT_METHOD_ALIAS" code_signing_identity:"iPhone Distribution"
    - bundle exec fastlane ios build_and_export project:"$PROJECT" workspace:"$WORKSPACE" scheme:"prod" configuration:"Release-prod" export_method:"$PROD_EXPORT_METHOD" output_name:"$IPA_FILE_NAME" app_identifier:"$APP_IDENTIFIER"
  artifacts:
    when: on_success
    paths:
      - ./ios/$IPA_FILE_NAME.ipa
      - ./ios/$IPA_FILE_NAME.app.dSYM.zip
  only:
    - master
  when: manual

.deliver_android: &deliver_android
  stage: deliver
  script:
    - echo "Delivering android app"
  tags:
    - docker
  image: gitlab-registry.proxym-group.net/docker/firebase-tools:latest

deliver_android:dev:firebase:
  <<: *deliver_android
  dependencies:
    - build_android:dev
  script:
    - firebase appdistribution:distribute ./build/app/outputs/apk/dev/release/app-dev-release.apk --app $FIREBASE_ANDROID_APP_ID --groups $FIREBASE_INTERNAL_TESTERS_GROUP
  only:
    - develop
deliver_android:dev:firebase:manual:
  <<: *deliver_android
  dependencies:
    - build_android:dev:manual
  needs: ["build_android:dev:manual"]
  script:
    - firebase appdistribution:distribute ./build/app/outputs/apk/dev/release/app-dev-release.apk --app $FIREBASE_ANDROID_APP_ID --groups $FIREBASE_INTERNAL_TESTERS_GROUP
  only:
    - /^feature\/.+$/
  when: on_success

deliver_android:qa:firebase:
  <<: *deliver_android
  rules:
    - if: $CI_COMMIT_TAG =~ /^QA_.*$/
      when: on_success
  dependencies:
    - build_android:qa
  script:
    - firebase appdistribution:distribute ./build/app/outputs/apk/qa/release/app-qa-release.apk --app $FIREBASE_ANDROID_APP_ID --groups $FIREBASE_INTERNAL_TESTERS_GROUP

deliver_android:sit:firebase:
  <<: *deliver_android
  dependencies:
    - build_android:sit
  script:
    - firebase appdistribution:distribute ./build/app/outputs/apk/sit/release/app-sit-release.apk --app $FIREBASE_ANDROID_APP_ID --groups $FIREBASE_TT_TESTERS_GROUP
  only:
    - develop
  when: manual

deliver_android:uat:firebase:
  <<: *deliver_android
  dependencies:
    - build_android:uat
  script:
    - firebase appdistribution:distribute ./build/app/outputs/apk/uat/release/app-uat-release.apk --app $FIREBASE_ANDROID_APP_ID --groups $FIREBASE_TT_TESTERS_GROUP
  only:
    - /^release\/.+$/
  when: manual

deliver_android:prod:googleplay:
  stage: deliver
  dependencies:
    - build_android:prod
  script:
    - cd ./android
    # On the next line specify the track of the application to use. The available tracks are: production, beta, alpha, internal
    # For the release_status parameter the valid values are: completed, draft, halted, inProgress
    - fastlane android deploy_googleplay track:"internal" apk:"../build/app/outputs/apk/prod/release/app-prod-release.apk" release_status:"draft"
  tags:
    - docker
  image: gitlab-registry.proxym-group.net/docker/fastlane:2.185.0
  only:
    - master
  when: manual

.deliver_ios: &deliver_ios
  stage: deliver
  script:
    - echo "Delivering ios app"
  tags:
    - docker
  image: gitlab-registry.proxym-group.net/docker/firebase-tools:latest

deliver_ios:dev:firebase:
  <<: *deliver_ios
  dependencies:
    - build_ios:dev
  script:
    - firebase appdistribution:distribute ./ios/$IPA_FILE_NAME.ipa --app $FIREBASE_IOS_APP_ID --groups $FIREBASE_INTERNAL_TESTERS_GROUP
  only:
    - develop

deliver_ios:dev:firebase:manual:
  <<: *deliver_ios
  dependencies:
    - build_ios:dev:manual
  needs: ["build_ios:dev:manual"]
  script:
    - firebase appdistribution:distribute ./ios/$IPA_FILE_NAME.ipa --app $FIREBASE_IOS_APP_ID --groups $FIREBASE_INTERNAL_TESTERS_GROUP
  only:
    - /^feature\/.+$/
  when: on_success

deliver_ios:qa:firebase:
  <<: *deliver_ios
  rules:
    - if: $CI_COMMIT_TAG =~ /^QA_.*$/
      when: on_success
  dependencies:
    - build_ios:qa
  script:
    - firebase appdistribution:distribute ./ios/$IPA_FILE_NAME.ipa --app $FIREBASE_IOS_APP_ID --groups $FIREBASE_INTERNAL_TESTERS_GROUP

deliver_ios:sit:firebase:
  <<: *deliver_ios
  dependencies:
    - build_ios:sit
  script:
    - firebase appdistribution:distribute ./ios/$IPA_FILE_NAME.ipa --app $FIREBASE_IOS_APP_ID --groups $FIREBASE_TT_TESTERS_GROUP
  only:
    - develop
  when: manual

deliver_ios:uat:firebase:
  <<: *deliver_ios
  dependencies:
    - build_ios:uat
  script:
    - firebase appdistribution:distribute ./ios/$IPA_FILE_NAME.ipa --app $FIREBASE_IOS_APP_ID --groups $FIREBASE_TT_TESTERS_GROUP
  only:
    - /^release\/.+$/
  when: manual

deliver_ios:prod:testflight:
  stage: deliver
  dependencies:
    - build_ios:prod
  script:
    - cd ./ios
    #Deliver using TestFlight. The APPSTORE_CONNECT_API_KEY variable is used to authenticate against App Store Connect. /!\Please make sure they are defined on Settings >> CI/CD >> Secret variables/!\
    - bundle exec fastlane ios deploy_testflight api_key:"$APPSTORE_CONNECT_API_KEY" ipa_path:"./$IPA_FILE_NAME.ipa" team_name:"$APPLE_DEVELOPER_TEAM_NAME"
  tags:
    - ios
  only:
    - master
  when: manual
